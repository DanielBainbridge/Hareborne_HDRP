//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""72bc420e-d400-4c79-b671-19de30e7f1ce"",
            ""actions"": [
                {
                    ""name"": ""LeftFire"",
                    ""type"": ""Button"",
                    ""id"": ""95650f56-2981-4126-a928-a05051fc1c63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightFire"",
                    ""type"": ""Button"",
                    ""id"": ""7e6edfb3-0de7-4f09-b452-bce38b0aba50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""b9956358-ff5b-464a-a2f1-d8d0fb440184"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a816894-31d8-41d5-bcdb-0c441e4f908a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ec9b4d6-5247-4d54-94c3-ca31cb8b2a06"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bd41287-2c12-4b5b-b276-2f85660a6df8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0542e932-a7a1-4140-9d81-138aee92135b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b62b61e6-5ccc-4fa1-83fe-b18d2456386f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a932cdc-f845-4c9f-970a-1de54200edf0"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIControls"",
            ""id"": ""bc9ea3d1-57c8-4610-8662-a07acd0df9a8"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Value"",
                    ""id"": ""146cb047-7f6c-40ea-ae01-b89e75d4b377"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""02c52582-bfe7-4911-889c-98f206c73600"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""f99a0f65-c4c1-412f-a218-041282375c4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""036ad462-6136-407a-8965-6d210f507643"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3fa47c53-c905-42e0-9a88-7154c3bdf0cc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63c1669e-cb25-4e1c-abd8-9e4cc0c0371d"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1af7703-1bca-43e5-a011-65d318656fc3"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ca0b405-3023-4c6b-982a-3ee03e7f5bd6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e163d3d3-a8e6-4556-a2cb-874499fe8ed2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5acdd6cb-9561-4a3f-bf68-ee1054deff07"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c2475ab-361f-44b2-8697-5bb217798bba"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_LeftFire = m_PlayerControls.FindAction("LeftFire", throwIfNotFound: true);
        m_PlayerControls_RightFire = m_PlayerControls.FindAction("RightFire", throwIfNotFound: true);
        m_PlayerControls_Look = m_PlayerControls.FindAction("Look", throwIfNotFound: true);
        // UIControls
        m_UIControls = asset.FindActionMap("UIControls", throwIfNotFound: true);
        m_UIControls_Navigate = m_UIControls.FindAction("Navigate", throwIfNotFound: true);
        m_UIControls_Point = m_UIControls.FindAction("Point", throwIfNotFound: true);
        m_UIControls_Submit = m_UIControls.FindAction("Submit", throwIfNotFound: true);
        m_UIControls_Cancel = m_UIControls.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private IPlayerControlsActions m_PlayerControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerControls_LeftFire;
    private readonly InputAction m_PlayerControls_RightFire;
    private readonly InputAction m_PlayerControls_Look;
    public struct PlayerControlsActions
    {
        private @Controls m_Wrapper;
        public PlayerControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftFire => m_Wrapper.m_PlayerControls_LeftFire;
        public InputAction @RightFire => m_Wrapper.m_PlayerControls_RightFire;
        public InputAction @Look => m_Wrapper.m_PlayerControls_Look;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterface != null)
            {
                @LeftFire.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLeftFire;
                @LeftFire.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLeftFire;
                @LeftFire.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLeftFire;
                @RightFire.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRightFire;
                @RightFire.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRightFire;
                @RightFire.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnRightFire;
                @Look.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_PlayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftFire.started += instance.OnLeftFire;
                @LeftFire.performed += instance.OnLeftFire;
                @LeftFire.canceled += instance.OnLeftFire;
                @RightFire.started += instance.OnRightFire;
                @RightFire.performed += instance.OnRightFire;
                @RightFire.canceled += instance.OnRightFire;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);

    // UIControls
    private readonly InputActionMap m_UIControls;
    private IUIControlsActions m_UIControlsActionsCallbackInterface;
    private readonly InputAction m_UIControls_Navigate;
    private readonly InputAction m_UIControls_Point;
    private readonly InputAction m_UIControls_Submit;
    private readonly InputAction m_UIControls_Cancel;
    public struct UIControlsActions
    {
        private @Controls m_Wrapper;
        public UIControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigate => m_Wrapper.m_UIControls_Navigate;
        public InputAction @Point => m_Wrapper.m_UIControls_Point;
        public InputAction @Submit => m_Wrapper.m_UIControls_Submit;
        public InputAction @Cancel => m_Wrapper.m_UIControls_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_UIControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControlsActions set) { return set.Get(); }
        public void SetCallbacks(IUIControlsActions instance)
        {
            if (m_Wrapper.m_UIControlsActionsCallbackInterface != null)
            {
                @Navigate.started -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnNavigate;
                @Navigate.performed -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnNavigate;
                @Navigate.canceled -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnNavigate;
                @Point.started -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnPoint;
                @Submit.started -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnSubmit;
                @Submit.performed -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnSubmit;
                @Submit.canceled -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnSubmit;
                @Cancel.started -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnCancel;
            }
            m_Wrapper.m_UIControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }
        }
    }
    public UIControlsActions @UIControls => new UIControlsActions(this);
    public interface IPlayerControlsActions
    {
        void OnLeftFire(InputAction.CallbackContext context);
        void OnRightFire(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IUIControlsActions
    {
        void OnNavigate(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
